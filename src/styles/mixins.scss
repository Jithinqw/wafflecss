$breakpoints: (ll: 1450px, lg: 1024px, md: 768px, sm: 640px, xs: 400px) !default;

/// Mixins for resolving media query
/// 
/// @param $min {number | string | null}
///     lower bound screensize.
/// @param $max {number | string | null}
///     upper bound screensize
/// @return string, media query or an error
///
@mixin resolve-media-query($min: null, $max: null) {

    $min-type: type-of($min);
    $max-type: type-of($max);

    // Resolve lower bound
    @if $min-type == string {
        @if $min == xs {
            $min: '(min-width: #{map-get($breakpoints, xs)})';
        }
        @else if $min == sm {
            $min: "(min-width: #{map-get($breakpoints, sm)})";
        }
        @else if $min == md {
            $min: "(min-width: #{map-get($breakpoints, md)})";
        }
        @else if $min == lg {
            $min: "(min-width: #{map-get($breakpoints, lg)})";
        }
        @else if $min == ll {
            $min: "(min-width: #{map-get($breakpoints, ll)})";
        }
        @else {
            @warn "Invalid string type";
        }
    }
    @else if $min-type == number {
        $min: "(min-width: #{$min})";
    }

    // Resolve upper bound
    @if $max-type == string {
        @if $max == xs {
            $max: "(max-width: #{map-get($breakpoints, xs) - 1})";
        }
        @else if $max == sm {
            $max: "(max-width: #{map-get($breakpoints, sm) - 1})";
        }
        @else if $max == md {
            $max: "(max-width: #{map-get($breakpoints, md) - 1})";
        }
        @else if $max == lg {
            $max: "(max-width: #{map-get($breakpoints, lg) - 1})";
        }
        @else if $max == ll {
            $max: "(max-width: #{map-get($breakpoints, ll) - 1})";
        }
        @else {
            @warn "Invalid string type";
        }
    }
    @else if $max-type == number {
        $max: "(max-width: #{$max})";
    }

    $query: false;
    @if $min and $max {
        $query: "#{$min} and #{$max}";
    }
    @else if $min {
        $query: "#{$min}";
    }
    @else if $max {
        $query: "#{$max}";
    }

    @if (not $query) {
        @warn "Invalid media query";
    }
    @else {
        @media #{$query} {
            @content;
        }
    }
}

// Mobile Mixin
@mixin mobile {
    @include resolve-media-query(null, md) {
        @content;
    }
}

// Smart phone mixin
@mixin smart-phone {
    @include resolve-media-query(null, sm) {
        @content;
    }
}

@mixin tab-portrait {
    @include resolve-media-query(sm, md) {
        @content;
    }
}

@mixin tab-landscape {
    @include resolve-media-query(md, lg) {
        @content;
    }
}

@mixin desktop {
    @include resolve-media-query(lg) {
        @content;
    }
}

/// Create a animation type from type
/// supported animation types
/// fadein
/// fadeout
/// wiggle
/// blink
/// 
/// @param animation-type {string | null}
/// @return string, animation CSS
///
@mixin resolve-animation($animation-type: null) {

    $type-animation-param: type-of($animation-type);

    @if $type-animation-param == string {
        @if $animation-type == fadein {
            visibility: visible;
            opacity: 1;
            transition: opacity 2s linear;
        }
        @if $animation-type == fadeout {
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s 2s, opacity 2s linear;  
        }
        @if $animation-type == wiggle {
                animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;
                transform: translate3d(0, 0, 0);
                backface-visibility: hidden;
                perspective: 1000px;
            
                @keyframes shake {
                    10%, 90% {
                        transform: translate3d(-1px, 0, 0);
                    }
                
                    20%, 80% {
                        transform: translate3d(1px, 0, 0);
                    }
                
                    30%, 50%, 70% {
                        transform: translate3d(-1px, 0, 0);
                    }
                
                    40%, 60% {
                        transform: translate3d(1px, 0, 0);
                    }
                }
        }
        @if $animation-type == blink {
            animation: blink-animation 1s steps(5, start) infinite;
            -webkit-animation: blink-animation 1s steps(5, start) infinite;
            @keyframes blink-animation {
                to {
                    visibility: hidden;
                }
            }
            @-webkit-keyframes blink-animation {
                to {
                    visibility: hidden;
                }
            }
        }
        @else {
            @warn "Invalid animation type";
        }
    }
    @else {
        @warn "Invalid param";
    }
}

/// Mixins for generating default font settings
/// 
/// @returns generate css default font
///
@mixin generate-default-font($font-type: null) {

    $font-type-param: type-of($font-type);

    @if $font-type-param == string {

        @if $font-type == default {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
            sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        @if $font-type == code {
            font-family: Menlo,Monaco,Consolas,"Courier New",monospace;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        @else {
            @warn "Invalid font option";
        }
    }
    
    @else {
        @warn "Invalid font type";
    }
}

/// Create a shadow from type
/// supported shadow types
/// default
/// raised
/// tile
/// doubleraised
/// doubleheaven
/// heaven
/// tileraised
/// titleboarded
/// innerraised
/// material
/// retro
/// mac
/// mactile
/// @param box-shadow {string | null}
/// @return string, shadow CSS
///
@mixin generate-shadow($box-shadow: null) {
    $shadow-type-param: type-of($box-shadow);

    @if $shadow-type-param == string {
        @if $box-shadow == default {
            box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
        }
        @if $box-shadow == raised {
            box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
        }
        @if $box-shadow == tile {
            box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;
        }
        @if $box-shadow == doubleraised {
            box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        }
        @if $box-shadow == doubleheaven {
            box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;
        }
        @if $box-shadow == heaven {
            box-shadow: rgba(255, 255, 255, 0.1) 0px 1px 1px 0px inset, rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;
        }
        @if $box-shadow == tileraised {
            box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;
        }
        @if $box-shadow == titleboarded {
            box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px, rgba(6, 24, 44, 0.65) 0px 4px 6px -1px, rgba(255, 255, 255, 0.08) 0px 1px 0px inset;
        }
        @if $box-shadow == innerraised {
            box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;
        }
        @if $box-shadow == material {
            box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;
        }
        @if $box-shadow == retro {
            box-shadow: blue 0px 0px 0px 2px inset, rgb(255, 255, 255) 10px -10px 0px -3px, rgb(31, 193, 27) 10px -10px, rgb(255, 255, 255) 20px -20px 0px -3px, rgb(255, 217, 19) 20px -20px, rgb(255, 255, 255) 30px -30px 0px -3px, rgb(255, 156, 85) 30px -30px, rgb(255, 255, 255) 40px -40px 0px -3px, rgb(255, 85, 85) 40px -40px;
        }
        @if $box-shadow == mac {
            box-shadow: rgba(0, 0, 0, 0.56) 0px 22px 70px 4px;
        }
        @if $box-shadow == mactile {
            box-shadow: rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset;
        }
        @else {
            @warn "Invalid shadow option";
        }
    }
    @else {
        @warn "Invalid shadow type";
    }
}